/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
/// <reference types="@types/googlemaps" />
interface AutocompleteProps {
    inputField: HTMLInputElement | null;
    options?: google.maps.places.AutocompleteOptions;
    onPlaceChanged: (place: google.maps.places.PlaceResult) => void;
}
/**
 * Hook to get a Google Maps Places Autocomplete instance
 * monitoring an input field
 */
declare const useAutocomplete: (props: AutocompleteProps) => google.maps.places.Autocomplete | null;
export default useAutocomplete;
